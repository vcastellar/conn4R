// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// jugadas_disponibles_cpp
IntegerVector jugadas_disponibles_cpp(IntegerMatrix tablero);
RcppExport SEXP _conn4R_jugadas_disponibles_cpp(SEXP tableroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type tablero(tableroSEXP);
    rcpp_result_gen = Rcpp::wrap(jugadas_disponibles_cpp(tablero));
    return rcpp_result_gen;
END_RCPP
}
// realizar_jugada_cpp
IntegerMatrix realizar_jugada_cpp(IntegerMatrix tablero, int columna, int jugador);
RcppExport SEXP _conn4R_realizar_jugada_cpp(SEXP tableroSEXP, SEXP columnaSEXP, SEXP jugadorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type tablero(tableroSEXP);
    Rcpp::traits::input_parameter< int >::type columna(columnaSEXP);
    Rcpp::traits::input_parameter< int >::type jugador(jugadorSEXP);
    rcpp_result_gen = Rcpp::wrap(realizar_jugada_cpp(tablero, columna, jugador));
    return rcpp_result_gen;
END_RCPP
}
// suma
int suma(int x, int y);
RcppExport SEXP _conn4R_suma(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(suma(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ordenar_jugadas_cpp
DataFrame ordenar_jugadas_cpp(IntegerMatrix tablero, int turno);
RcppExport SEXP _conn4R_ordenar_jugadas_cpp(SEXP tableroSEXP, SEXP turnoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type tablero(tableroSEXP);
    Rcpp::traits::input_parameter< int >::type turno(turnoSEXP);
    rcpp_result_gen = Rcpp::wrap(ordenar_jugadas_cpp(tablero, turno));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_conn4R_jugadas_disponibles_cpp", (DL_FUNC) &_conn4R_jugadas_disponibles_cpp, 1},
    {"_conn4R_realizar_jugada_cpp", (DL_FUNC) &_conn4R_realizar_jugada_cpp, 3},
    {"_conn4R_suma", (DL_FUNC) &_conn4R_suma, 2},
    {"_conn4R_ordenar_jugadas_cpp", (DL_FUNC) &_conn4R_ordenar_jugadas_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_conn4R(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
